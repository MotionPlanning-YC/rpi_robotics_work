/* Copyright (c) 2010-2011, Georgia Tech Research Corporation
 * All rights reserved.
 *
 * Author(s): Neil T. Dantam <ntd@gatech.edu>
 * Georgia Tech Humanoid Robotics Lab
 * Under Direction of Prof. Mike Stilman
 *
 *
 * This file is provided under the following "BSD-style" License:
 *
 *
 *   Redistribution and use in source and binary forms, with or
 *   without modification, are permitted provided that the following
 *   conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 *   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 *   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 *   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *   AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 *
 */


/* These would be helpful, but break the GCL-compiled maxima in debian */
/*load("vect");*/
/*load("eigen");*/

/* Element reference in lists or column vectors */
vref(v,i) := if matrixp(v) then v[i][1] elseif zeromatrixp(v) then 0 else v[i] ;

/* Cross Product */
vcross(a,b) := [
  vref(a,2)*vref(b,3) - vref(a,3)*vref(b,2),
  vref(a,3)*vref(b,1) - vref(a,1)*vref(b,3),
  vref(a,1)*vref(b,2) - vref(a,2)*vref(b,1)
  ];

/* dot products */
dot3(a,b) := a[1]*b[1]+a[2]*b[2]+a[3]*b[3];
dot4(a,b) := a[4]*b[4] + dot3(a,b);

/* Create the skew-symmetric cross-product matrix */
cross_mat(x) := matrix(
  [    0,     -vref(x,3),  vref(x,2)],
  [ vref(x,3),         0, -vref(x,1)],
  [-vref(x,2), vref(x,1),         0 ] );

/* DH Param: build transform from DH parameters in Distal convention */
dh_distal(d,theta,r,alpha) := block(
  [ct, st, ca, sa],
  ct : cos(theta), st: sin(theta), ca: cos(alpha), sa: sin(alpha),
  matrix(
    [ct, -st*ca, st*sa, r*ct],
    [st, ct*ca, -ct*sa, r*st],
    [0, sa, ca, d],
    [0, 0, 0, 1]));



/* Transform Matrix Rotations */
tf_rotx( theta ) := matrix(
  [1,         0,    0,         0],
  [0, cos(theta), -sin(theta), 0],
  [0, sin(theta),  cos(theta), 0],
  [0,          0,           0, 1] );

tf_roty( theta ) := matrix(
  [cos(theta),   0,    sin(theta),   0],
  [0,            1,             0,   0],
  [-sin(theta),  0,    cos(theta),   0],
  [0,            0,             0,   1] );

tf_rotz( theta ) := matrix(
  [cos(theta),  -sin(theta),    0,   0],
  [sin(theta),   cos(theta),    0,   0],
  [0,            0,             1,   0],
  [0,            0,             0,   1] );

/* Transform Matrix Translation */
tf_tran(x,y,z) := matrix(
  [1,0,0,x],
  [0,1,0,y],
  [0,0,1,z],
  [0,0,0,1] );

tf_get_tran(tf) := matrix([tf[1,4]],[tf[2,4]],[tf[3,4]]);

/* quaternions */
qconj(q) := [-vref(q,1), -vref(q,2), -vref(q,3), vref(q,4)];
qinv(q) := qconj(q) / sqrt(dot4(q,q));
qxyz(q) := [vref(q,1), vref(q,2), vref(q,3)];

qmul(q1,q2) := append(
  (q1[4]*qxyz(q2) + q2[4]*qxyz(q1) + vcross(q1,q2)),
  [q1[4]*q2[4] - dot3(q1,q2)] );

qrot(q,v) := v + vcross( 2*qxyz(q), ( vcross(qxyz(q),v) + q[4]*v ) );

qnrot(q,v) := qmul( qmul(q, [vref(v,1), vref(v,2), vref(v,3), 0] ),
  qinv(q) );

qaxang(theta, v) := ([
  sin(theta/2)*vref(v,1),
  sin(theta/2)*vref(v,2),
  sin(theta/2)*vref(v,3),
  cos(theta/2) ]);


qmat_l(q) :=
matrix(
  [ q[4], -q[3],  q[2], q[1]],
  [ q[3],  q[4], -q[1], q[2]],
  [-q[2],  q[1],  q[4], q[3]],
  [-q[1], -q[2], -q[3], q[4]]);


qmat_r(q) :=
matrix(
  [ q[4],  q[3], -q[2], q[1]],
  [-q[3],  q[4],  q[1], q[2]],
  [ q[2], -q[1],  q[4], q[3]],
  [-q[1], -q[2], -q[3], q[4]]);

/* dual quaternions */
dq_real(dq) := [dq[1], dq[2], dq[3], dq[4]];
dq_dual(dq) := [dq[5], dq[6], dq[7], dq[8]];

dqconj(dq) := append( qconj(dq_real(dq)), qconf(dq_dual(dq)) );

dqmul(d1, d2) := append(
  qmul( dq_real(d1), dq_real(d2) ),
  qmul( dq_real(d1), dq_dual(d2) ) + qmul( dq_dual(d1), dq_real(d2) ) );

/* Rodrigues' Formula */

rodrigues_mat( axis, theta ) := (
  ident(3)*cos(theta) +
  cross_mat(axis)*sin(theta) +
  (1-cos(theta)) * axis . transpose(axis) );

/* Gives of list of transform from ground to each link in the
   transform chain tfs */
tf_pyramid( tfs ) := block([prev],
  prev: ident(4),
  map( lambda([tf],
      prev : prev . tf,
      prev),
    tfs ) );

/* tf_93 */
tf_93( R, v, p ) := R . p + v;

/* Find a column of the jacobian for a 3-translation, 3-rotation
   function */
jacobian_column(a, q, pe) := block(
  [jp, jr],
  jp : vcross(a, pe - q ),
  jr: a,
  /*print(jr),*/
  matrix([vref(jp,1)], [vref(jp,2)], [vref(jp,3)], [vref(jr,1)], [vref(jr,2)], [vref(jr,3)])
  );

/* Create a Jacobian from the list of transforms and the list of axes
   (column vectors). */
spatial_jacobian(tfs, axes, tfe) := block(
  [pyr, pe],
  pyr: tf_pyramid(tfs),
  pe: tf_get_tran(last(pyr) . tfe),
  apply(addcol,
    append([matrix()],
      map(lambda([tf, a_local], jacobian_column(tf . a_local, tf_get_tran(tf), pe)),
        pyr, axes))));


/* Local Variables: */
/* mode: maxima */
/* End: */
