"""autogenerated by genpy from schunk_api/PositionJointSpace.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PositionJointSpace(genpy.Message):
  _md5sum = "aa74335262b2e770707f66d310a2112c"
  _type = "schunk_api/PositionJointSpace"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 joint1Position
float64 joint2Position
float64 joint3Position
float64 joint4Position 
float64 joint5Position
float64 joint6Position

"""
  __slots__ = ['joint1Position','joint2Position','joint3Position','joint4Position','joint5Position','joint6Position']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint1Position,joint2Position,joint3Position,joint4Position,joint5Position,joint6Position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionJointSpace, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joint1Position is None:
        self.joint1Position = 0.
      if self.joint2Position is None:
        self.joint2Position = 0.
      if self.joint3Position is None:
        self.joint3Position = 0.
      if self.joint4Position is None:
        self.joint4Position = 0.
      if self.joint5Position is None:
        self.joint5Position = 0.
      if self.joint6Position is None:
        self.joint6Position = 0.
    else:
      self.joint1Position = 0.
      self.joint2Position = 0.
      self.joint3Position = 0.
      self.joint4Position = 0.
      self.joint5Position = 0.
      self.joint6Position = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.joint1Position, _x.joint2Position, _x.joint3Position, _x.joint4Position, _x.joint5Position, _x.joint6Position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.joint1Position, _x.joint2Position, _x.joint3Position, _x.joint4Position, _x.joint5Position, _x.joint6Position,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.joint1Position, _x.joint2Position, _x.joint3Position, _x.joint4Position, _x.joint5Position, _x.joint6Position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.joint1Position, _x.joint2Position, _x.joint3Position, _x.joint4Position, _x.joint5Position, _x.joint6Position,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
