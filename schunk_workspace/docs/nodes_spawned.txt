These are the ROS nodes that are spawned when executing

"roslaunch schunk_lwa4p lwa4p.launch"   

- Since roslaunch doesn't spawn nodes in sequential order, ordering does not matter here.   

1)  robot_state_publisher (http://wiki.ros.org/robot_state_publisher)
	- type state_publisher
	- This node publishes the joint state of the Powerball via the Transforms Tf library 

2) arm_controller 

3) Trajectory Controller is located in:
cob_trajectory_controller/genericArmCtrl.h

Rostopics:
----------

/joint_states
	- gives time stamp in seconds, nanoseconds 
	- joint positions in radians
	- joint velocities
	- joint efforts (all 0.0?)

/arm_controller/command_vel
	- gives the velocity sent to each joint in radians/second  

/arm_controller/follow_joint_trajectory/goal
	- sets the goal for the 

Cob Command GUI
---------------
- started by calling
	roslaunch schunk_lwa4p dashboard.launch

- 1 ROS parameter added: config/command_gui_buttons.yaml
	- passed in as a parameter in the control_buttons namespace  

- Joint Configurations are stored in config/joint_configurations.yaml
	- includes definitions for
		- waveleft, waveright, folded, home 

- config/command_gui_buttons.yaml stores groups for:
	- arm_settings, arm positions, and arm trajectories  

- The file responsible for sending the actual commands to the Powerball is in: simple_script_server.py:
	cob_command_tools/cob_script_server/src/simple_script_server.py  

	- Look for move_traj() function to see how a trajectory is generated 
	- simple_script_server.py utilizes the ROS actionlib library rather than topics/services to reduce message latency times

	- Example command sent by the cob_command_gui for HOME:
	- Arguments: ('arm', 'home', False) with a default value of "None" sent for the mode
	- Function: simple_script_server.move()    	
	- This function will call self.move_traj()  
		- Arguments are:
			1) component_name = 'arm'
			2) parameter_name = 'folded'
			3) blocking (overrides default value of True) = false
		
			- Inside self.move_traj() (WARNING - The github repo differs from the APT-GET version)
				1) joint_names is a list containing the names of the joint:
					- ['arm_1_joint', 'arm_2_joint', ..., 'arm_6_joint]
				2) param are the target joint values to rotate to:
					(for home position): [[0, 0, 0, 0, 0, 0]] 				
				3) trajectory traj is generated/is a list of points to rotate to:
					(for home position): [[0, 0, 0, 0, 0, 0]]  
				4) Send the new trajectory with a JointTrajectory() message:
					traj_msg = JointTrajectory()
					traj_msg.header_stamp = rospy.Time.now() + rospy.Duration(0.5)
					traj_msg.joint_names = joint_names 
					point_nr = 0

					for point in traj:
						point_nr = point_nr + 1
						point_msg = JointTrajectoryPoint()
						point_msg.positions = point
						point_msg.velocities = [0] * len(joint_names)
						point_msg.time_from_start = rospy.Duration(3 * point_nr)
						traj_msg.points.append(point_msg)

				5) The action server name is of the form:
					/<component_name>_controller/follow_joint_trajectory 

					In our case, the action server name is:
					/arm_controller/follow_joint_trajectory
			  
