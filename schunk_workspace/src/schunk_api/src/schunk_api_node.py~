#!/usr/bin/python

'''
This node provides Position Control API access to the Schunk Powerball Arm.

Bryant Pong
RPI CS Robotics Lab
10/17/14

Last Updated: 4/24/15 - 4:46 PM
'''

# Standard Python Libraries:
import time
import numpy as np

# ROS Libraries:
import rospy
import roslib
import actionlib
import simple_script_server

# Standard ROS Messages:
from trajectory_msgs.msg import *
from geometry_msgs.msg import *
from move_base_msgs.msg import *
from tf.transformations import *
from std_msgs.msg import String, ColorRGBA
from control_msgs.msg import *
from sensor_msgs.msg import JointState

# Custom ROS Messages:
from schunk_api.srv import *

# Fraunhofer Libraries:
from cob_sound.msg import *
from cob_script_server.msg import *
from cob_srvs.srv import *

# Manifests to load:
roslib.load_manifest('cob_script_server')

# Custom Kinematic Libraries:
import kinematic_functions as kf
from powerball_constants import *

'''
This function sends a position control request to the Powerball.  The request
message consists of 6 float64 parameters representing the target angles for
the joints.  This API Function works in JOINT SPACE.
'''  
def position_api_joint_space_handler(req):

	'''
	This simple_script_server is a custom library that was created by 
	the Fraunhofer institute.  An action_handle will listen for position
	commands.
	'''
	ah = simple_script_server.action_handle("move", "arm", "home", False, False)
	if False:
		return ah
	else:
		ah.set_active()

	# Form a list of the target joint angles:
	targetJointAngles = [req.joint1, req.joint2, req.joint3, req.joint4, req.joint5, req.joint6]

	'''
    Encapsulate the target jointangles into another list (this forms a trajectory)
	'''
	traj = [targetJointAngles]

	# Generate the trajectory message to send to the Powerball:
	traj_msg = JointTrajectory()
	traj_msg.header.stamp = rospy.Time.now() + rospy.Duration(0.5)
	traj_msg.joint_names = ['arm_1_joint', 'arm_2_joint', 'arm_3_joint', 'arm_4_joint', 'arm_5_joint', 'arm_6_joint']
	point_nr = 0

	# Set the target velocities of the target joints.  They are set to 0 to denote stopping at the destinations:
	for point in traj:
		point_nr += 1
		point_msg = JointTrajectoryPoint()
		point_msg.positions = point
		point_msg.velocities = [0] * 6
		point_msg.time_from_start = rospy.Duration(3 * point_nr)
		traj_msg.points.append(point_msg)

	# Send the position control message to the action server node:
	action_server_name = '/arm_controller/follow_joint_trajectory'

	client = actionlib.SimpleActionClient(action_server_name, FollowJointTrajectoryAction)
	if not client.wait_for_server(rospy.Duration(5)):
		print("Action server not ready within timeout.  Aborting...")
		ah.set_failed(4)
		return ah
	else:
		print("Action server ready!")

	client_goal = FollowJointTrajectoryGoal()
	client_goal.trajectory = traj_msg
	client.send_goal(client_goal)
	ah.set_client(client)

	ah.wait_inside()
	# return ah
	return 0

jointAngles = [-9001.0, -9001.0, -9001.0, -9001.0, -9001.0, -9001.0]
jointStateCallbackEx = False

'''
This callback assigns the new joint positions to variables j1...j6.
It will also toggle the "hasNewMessage" flag to True. 
'''
def jointStateCallback(data):

	global jointAngles
	global jointStateCallbackEx

	print("I received jointStates!")
	print("data: " + str(data))
	j1 = data.position[0]
	j2 = data.position[1]
	j3 = data.position[2]
	j4 = data.position[3]
	j5 = data.position[4]
	j6 = data.position[5]
	jointAngles = [j1, j2, j3, j4, j5, j6]

	jointStateCallbackEx = True

'''
This function handles a position command given in the coordinate space.  This 
function expects a message (defined in msg/PositionCoordSpace.msg) in the form 
of an (X, Y, Z) tuple, where X/Y/Z are floating point numbers indicating the X, Y, Z
destinations of the end effector (in mm.)
'''
def position_api_coord_space_handler(req):
	
	global jointStateCallbackEx

	'''
	This simple_script_server is a custom library that was created by
	the Fraunhofer institute.  An action_handle will listen for position commands.
	'''
	ah = simple_script_server.action_handle("move", "arm", "home", False, False)
	if False:
		return ah
	else:
		ah.set_active()
	
	# Get the target (X, Y, Z) coordinates to move to:
	targetCoords = [req.xCoord, req.yCoord, req.zCoord]

	# Get the desired rotation (in quaternion) to move to:
	targetRot = [req.quatW, req.quatX, req.quatY, req.quatZ]

	'''
	Currently the Powerball requires a list of the 6 target joint angles to move.
	We can calculate these target joint angles by calling the inverse kinematics
	functions:
	'''

	'''
	First, get a list of the current joint angles.  The joint angles can be
	found from rostopic /joint_states 
	'''
	sub = rospy.Subscriber("/joint_states", JointState, jointStateCallback) 

	while jointStateCallbackEx == False:
		pass

	rospy.Subscriber.unregister(sub)
	jointStateCallbackEx = False

	# We need to convert the quaternion into a 4x4 homogeneous transformation matrix:
	homoMat = quaternion_matrix(targetRot) 
	
	# Insert the desired target joint coordinate into the transformation matrix:
	homoMat[0,3] = req.xCoord
	homoMat[1,3] = req.yCoord
	homoMat[2,3] = req.zCoord    

	'''
	Calculate the inverse kinematics given the target rotation/position and
	the list of current joint angles:
	'''

	targetJointAngles = kf.ikine(homoMat, jointAngles)

	if len(targetJointAngles) != 0:
		# We have a valid solution!  Move the Powerball to this location:
	
		targetJointAngles = targetJointAngles[:6]

		# Encapsulate the targetJointAngles into a trajectory:
		traj = [targetJointAngles] 

		# Generate the trajectory message to send to the Powerball:
		traj_msg = JointTrajectory()
		traj_msg.header.stamp = rospy.Time.now() + rospy.Duration(0.5)
		traj_msg.joint_names = ['arm_1_joint', 'arm_2_joint', 'arm_3_joint', 'arm_4_joint', 'arm_5_joint', 'arm_6_joint']
		point_nr = 0

		# Set the target velocities of the target joints.  They are set to 0 to denote stopping at the destinations:
		for point in traj:
			point_nr += 1
			point_msg = JointTrajectoryPoint()
			point_msg.positions = point
			point_msg.velocities = [0] * 6
			point_msg.time_from_start = rospy.Duration(3 * point_nr)
			traj_msg.points.append(point_msg)

		# Send the position control message to the action server node:
		action_server_name = '/arm_controller/follow_joint_trajectory'
		
		client = actionlib.SimpleActionClient(action_server_name, FollowJointTrajectoryAction)
		if not client.wait_for_server(rospy.Duration(5)):
			print("Action server not ready within timeout.  Aborting...")
			ah.set_failed(4)
			return ah
		else:
			print("Action server ready for Coordinate API Request")
		
		client_goal = FollowJointTrajectoryGoal()
		client_goal.trajectory = traj_msg
		client.send_goal(client_goal)
		ah.set_client(client)

		ah.wait_inside()
	return 0

'''
This handler allows a user to send a geometry_msgs/Pose message and calls the inverse kinematics
to move the Powerball to a target location.    
'''
def position_api_coord_space_quat_handler(req):
	
	global jointStateCallbackEx

	'''
	This simple_script_server is a custom library that was created by
	the Fraunhofer institute.  An action_handle will listen for position commands.
	'''
	ah = simple_script_server.action_handle("move", "arm", "home", False, False)
	if False:
		return ah
	else:
		ah.set_active()
	
	# Get the target (X, Y, Z) coordinates to move to:
	targetCoords = [req.position.x, req.position.y, req.position.z]

	# Get the desired rotation (in quaternion) to move to:
	targetRot = [req.orientation.w, req.orientiation.x, req.orientation.y, req.orientation.z]

	'''
	Currently the Powerball requires a list of the 6 target joint angles to move.
	We can calculate these target joint angles by calling the inverse kinematics
	functions:
	'''

	'''
	First, get a list of the current joint angles.  The joint angles can be
	found from rostopic /joint_states 
	'''
	sub = rospy.Subscriber("/joint_states", JointState, jointStateCallback) 

	while jointStateCallbackEx == False:
		pass

	rospy.Subscriber.unregister(sub)
	jointStateCallbackEx = False

	# We need to convert the quaternion into a 4x4 homogeneous transformation matrix:
	homoMat = quaternion_matrix(targetRot) 
	
	# Insert the desired target joint coordinate into the transformation matrix:
	homoMat[0,3] = req.xCoord
	homoMat[1,3] = req.yCoord
	homoMat[2,3] = req.zCoord    

	'''
	Calculate the inverse kinematics given the target rotation/position and
	the list of current joint angles:
	'''

	targetJointAngles = kf.ikine(homoMat, jointAngles)

	if len(targetJointAngles) != 0:
		# We have a valid solution!  Move the Powerball to this location:
	
		targetJointAngles = targetJointAngles[:6]

		# Encapsulate the targetJointAngles into a trajectory:
		traj = [targetJointAngles] 

		# Generate the trajectory message to send to the Powerball:
		traj_msg = JointTrajectory()
		traj_msg.header.stamp = rospy.Time.now() + rospy.Duration(0.5)
		traj_msg.joint_names = ['arm_1_joint', 'arm_2_joint', 'arm_3_joint', 'arm_4_joint', 'arm_5_joint', 'arm_6_joint']
		point_nr = 0

		# Set the target velocities of the target joints.  They are set to 0 to denote stopping at the destinations:
		for point in traj:
			point_nr += 1
			point_msg = JointTrajectoryPoint()
			point_msg.positions = point
			point_msg.velocities = [0] * 6
			point_msg.time_from_start = rospy.Duration(3 * point_nr)
			traj_msg.points.append(point_msg)

		# Send the position control message to the action server node:
		action_server_name = '/arm_controller/follow_joint_trajectory'
		
		client = actionlib.SimpleActionClient(action_server_name, FollowJointTrajectoryAction)
		if not client.wait_for_server(rospy.Duration(5)):
			print("Action server not ready within timeout.  Aborting...")
			ah.set_failed(4)
			return ah
		else:
			print("Action server ready for Coordinate API Request")
		
		client_goal = FollowJointTrajectoryGoal()
		client_goal.trajectory = traj_msg
		client.send_goal(client_goal)
		ah.set_client(client)

		ah.wait_inside()
	return 0

'''
This handler allows a user to initialize, halt, and emergency stop the Powerball   
'''
def init_halt_api_handler(req):
	
	# Acquire the requested action (a string):
	userCmd = req.command

	# What command is it?
	if userCmd == 'init':
		rospy.wait_for_service('/arm_controller/init')
		try:
			initRobot = rospy.ServiceProxy('/arm_controller/init', Trigger)
			resp = initRobot()

			print("resp.success.data is: " + str(resp.success.data))

			# If initialization fails, try again:
			while resp.success.data != True:
				resp = initRobot()
			
			return 0
		except rospy.ServiceException, e:
			print("Service call failed when initializing robot: %s" % e)
	elif userCmd == 'halt':
		rospy.wait_for_service('/arm_controller/halt')
		try:
			haltRobot = rospy.ServiceProxy('/arm_controller/halt', Trigger)
			resp = haltRobot()
			return 0
		except rospy.ServiceException, e:
			print("Service call failed when calling robot halt: %s" % e)
	else:
		# Treat any other command received as an emergency stop:
		rospy.wait_for_service('/arm_controller/stop', Trigger)
		try:
			estopRobot = rospy.ServiceProxy('/arm_controller/stop', Trigger)
			resp = estopRobot()
			return 0
		except rospy.ServiceException, e:
			print("Service call failed when calling robot emergency stop; %s" % e)

def api_server():
	# Initialize the API Server node:
	rospy.init_node('schunk_api_server')

	# Start service listeners to accept API calls given in Joint and Coordinate spaces:
	PositionAPIJoint = rospy.Service('PositionAPIJointSpace', PositionAPIJointSpace, position_api_joint_space_handler)
	PositionAPICoord = rospy.Service('PositionAPICoordSpace', PositionAPICoordSpace, position_api_coord_space_handler) 
	PositionAPICoordQuat = rospy.Service('PositionAPICoordSpaceQuat', PositionAPICoordSpaceQuat, position_api_coord_space_quat_handler)

	# This service accepts API calls to initialize, halt, and emergency stop the Powerball:
	InitHaltAPIsrv = rospy.Service('InitHaltAPI', InitHaltAPI, init_halt_api_handler)	   
	
	rospy.spin() 

# Main function.  This node will listen for a position control message and will
# then execute the command.  
if __name__ == '__main__':
	rospy.loginfo("Schunk API Node Up!")
	api_server()
