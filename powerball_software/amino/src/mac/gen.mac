/*
 * Copyright (c) 2010-2011, Georgia Tech Research Corporation
 * All rights reserved.
 *
 * Author(s): Neil T. Dantam <ntd@gatech.edu>
 * Georgia Tech Humanoid Robotics Lab
 * Under Direction of Prof. Mike Stilman
 *
 *
 * This file is provided under the following "BSD-style" License:
 *
 *
 *   Redistribution and use in source and binary forms, with or
 *   without modification, are permitted provided that the following
 *   conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 *   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 *   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 *   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *   AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* generate*/
load("./amino.mac");

with_stdout("mac.f",
  /* Quaternion Rotation */
  print("      Subroutine aa_tf_qrot (q, v, p)"),
  print("      Double Precision q(4)"),
  print("      Double Precision v(3)"),
  print("      Double Precision p(3,1)"),
  fortran( p = submatrix(4,transpose(qrot([q(1), q(2), q(3), q(4)], [v(1), v(2), v(3)])) )),
  print("      Return"),
  print("      End"),

  /* 3x3 inverse */
  print("      Subroutine aa_la_inverse3x3 (R, S)"),
  print("      Double Precision R(3,3)"),
  print("      Double Precision S(3,3)"),
  for i:1 thru 3 do
  for j:1 thru 3 do
  printf( true, "      Double Precision R~d~d~%", i, j ),
  for i:1 thru 3 do
  for j:1 thru 3 do
  printf( true, "      R~d~d = R(~d,~d)~%", i, j, i, j ),
  fortran( S = invert(matrix(
        [R11,R12,R13],
        [R21,R22,R23],
        [R31,R32,R33])) ),
  print("      Return"),
  print("      End"),


  /* 93 chain */
  /* print("      Subroutine aa_tf_93chain(R1, v1, R2, v2, R3, v3)"), */
  /* print("      Double Precision R1(3,3)"), */
  /* print("      Double Precision v1(3)"), */
  /* print("      Double Precision R2(3,3)"), */
  /* print("      Double Precision v2(3)"), */
  /* print("      Double Precision R3(3,3)"), */
  /* print("      Double Precision v3(3,1)"), */
  /* block( [tf], */
  /*   tf : */
  /*   matrix( */
  /*     [R1(1,1),R1(1,2),R1(1,3), v1(1)], */
  /*     [R1(2,1),R1(2,2),R1(2,3), v1(2)], */
  /*     [R1(3,1),R1(3,2),R1(3,3), v1(3)], */
  /*     [0,0,0,1]) */
  /*   . */
  /*   matrix( */
  /*     [R2(1,1),R2(1,2),R2(1,3), v2(1)], */
  /*     [R2(2,1),R2(2,2),R2(2,3), v2(2)], */
  /*     [R2(3,1),R2(3,2),R2(3,3), v2(3)], */
  /*     [0,0,0,1]), */
  /*   fortran( R3 = submatrix( 4, tf, 4 ) ), */
  /*   fortran( v3 = submatrix( 4, tf, 1,2,3)) */
  /*   ), */
  /* print("      Return"), */
  /* print("      End"), */

  /* 9mul */
  print("      Subroutine aa_tf_9mul(R1, R2, R)"),
  print("      Double Precision R1(3,3)"),
  print("      Double Precision R2(3,3)"),
  print("      Double Precision R(3,3)"),
  fortran( R =
    matrix(
      [R1(1,1),R1(1,2),R1(1,3)],
      [R1(2,1),R1(2,2),R1(2,3)],
      [R1(3,1),R1(3,2),R1(3,3)])
    .
    matrix(
      [R2(1,1),R2(1,2),R2(1,3)],
      [R2(2,1),R2(2,2),R2(2,3)],
      [R2(3,1),R2(3,2),R2(3,3)]) ),
  print("      Return"),
  print("      End")
);
